import "std";
import "jort_sort.sunder";

func display[[T]](slice: []T) void {
    for i in countof(slice) {
        if i != 0 {
            std::print(std::out(), ", ");
        }
        std::print_format(std::out(), "{}", (:[]std::formatter)[std::formatter::init[[T]](&slice[i])]);
    }
    std::print(std::out(), "\n");
}

func test[[T]](allocator: std::allocator, slice: []T) void {
    display[[T]](slice);
    var was_sorted = jort_sort[[T]](slice, allocator);
    display[[T]](slice);

    if was_sorted {
        std::print_line(std::out(), "slice was already sorted");
    }
    else {
        std::print_line(std::out(), "slice was not already sorted");
    }
}

func main() void {
    var allocator = std::general_allocator::init();
    defer {
        allocator.fini();
    }
    var allocator = std::allocator::init[[typeof(allocator)]](&allocator);

    test[[ssize]](allocator, (:[]ssize)[1, 7, 10]);
    std::print(std::out(), "\n");
    test[[ssize]](allocator, (:[]ssize)[10, 7, 1]);
    std::print(std::out(), "\n");
    test[[[]byte]](allocator, (:[][]byte)["apple", "banana", "carrot"]);
    std::print(std::out(), "\n");
    test[[[]byte]](allocator, (:[][]byte)["carrot", "banana", "apple"]);
}
################################################################################
# 1, 7, 10
# 1, 7, 10
# slice was already sorted
#
# 10, 7, 1
# 1, 7, 10
# slice was not already sorted
#
# apple, banana, carrot
# apple, banana, carrot
# slice was already sorted
#
# carrot, banana, apple
# apple, banana, carrot
# slice was not already sorted

