import "std";

struct big_decimal {
    # The value of this big decimal is equal to `unscaled * 10**-scale`.
    var _unscaled: std::big_integer;
    var _scale: usize;

    func init(allocator: std::allocator) big_decimal {
        return (:big_decimal){
            ._unscaled = std::big_integer::init_with_allocator(allocator),
            ._scale = 0
        };
    }

    func init_from_big_decimal(allocator: std::allocator, from: *big_decimal) big_decimal {
        var self = big_decimal::init(allocator);
        big_decimal::assign(&self, from);
        return self;
    }

    func init_from_int[[T]](allocator: std::allocator, scale: usize, int: T) big_decimal {
        var unscaled = std::big_integer::init_from_int_with_allocator[[T]](allocator, int);
        for _ in scale {
            std::big_integer::mul(&unscaled, &unscaled, &std::big_integer::POSITIVE_TEN);
        }

        return (:big_decimal){
            ._unscaled = unscaled,
            ._scale = scale
        };
    }

    func init_from_str(allocator: std::allocator, str: []byte) std::result[[big_decimal, std::error]] {
        var decimal = std::optional[[usize]]::EMPTY;
        for i in countof(str) {
            if str[i] == '.' {
                decimal = std::optional[[usize]]::init_value(i);
                break;
            }
        }

        if decimal.is_empty() {
            var result = std::big_integer::init_from_str_with_allocator(allocator, str, 10);
            if result.is_error() {
                return std::result[[big_decimal, std::error]]::init_error(result.error());
            }
            return std::result[[big_decimal, std::error]]::init_value((:big_decimal){
                ._unscaled = result.value(),
                ._scale = 0
            });
        }

        var result = std::big_integer::init_from_str_with_allocator(allocator, str[0:decimal.value()], 10);
        if result.is_error() {
            return std::result[[big_decimal, std::error]]::init_error(result.error());
        }
        var integer_part = result.value();
        defer integer_part.fini();

        var result = std::big_integer::init_from_str_with_allocator(allocator, str[decimal.value()+1:countof(str)], 10);
        if result.is_error() {
            return std::result[[big_decimal, std::error]]::init_error(result.error());
        }
        var decimal_part = result.value();
        defer decimal_part.fini();

        var unscaled = std::big_integer::init_from_big_integer_with_allocator(allocator, &integer_part);
        var scale = countof(str[decimal.value()+1:countof(str)]);
        for _ in scale {
            std::big_integer::mul(&unscaled, &unscaled, &std::big_integer::POSITIVE_TEN);
        }

        if unscaled._sign == -1 {
            std::big_integer::sub(&unscaled, &unscaled, &decimal_part);
        }
        else {
            std::big_integer::add(&unscaled, &unscaled, &decimal_part);
        }

        return std::result[[big_decimal, std::error]]::init_value((:big_decimal){
            ._unscaled = unscaled,
            ._scale = scale
        });
    }

    func fini(self: *big_decimal) void {
        self.*._unscaled.fini();
    }

    func scale(self: *big_decimal) usize {
        return self.*._scale;
    }

    func set_scale(self: *big_decimal, scale: usize) void {
        if self.*._scale == scale {
            return;
        }

        if self.*._scale < scale {
            for self.*._scale < scale {
                std::big_integer::mul(&self.*._unscaled, &self.*._unscaled, &std::big_integer::POSITIVE_TEN);
                self.*._scale = self.*._scale + 1;
            }
            return;
        }

        # self.*._scale > scale
        var tmp = std::big_integer::init_from_big_integer_with_allocator(self.*._unscaled._allocator, &std::big_integer::POSITIVE_ONE);
        defer tmp.fini();

        for self.*._scale > scale {
            std::big_integer::mul(&tmp, &tmp, &std::big_integer::POSITIVE_TEN);
            self.*._scale = self.*._scale - 1;
        }

        var rem = std::big_integer::init_with_allocator(self.*._unscaled._allocator);
        defer rem.fini();

        std::big_integer::divrem(&self.*._unscaled, &rem, &self.*._unscaled, &tmp);
        std::big_integer::div(&tmp, &tmp, &std::big_integer::POSITIVE_TWO);

        std::big_integer::abs(&rem, &rem);
        if std::ge[[std::big_integer]](&rem, &tmp) {
            # Round half up.
            std::big_integer::add(&self.*._unscaled, &self.*._unscaled, &std::big_integer::POSITIVE_ONE);
        }
    }

    func assign(self: *big_decimal, from: *big_decimal) void {
        if self == from {
            return;
        }

        std::big_integer::assign(&self.*._unscaled, &from.*._unscaled);
        self.*._scale = from.*._scale;
    }

    func compare(lhs: *big_decimal, rhs: *big_decimal) ssize {
        if lhs.*._scale == rhs.*._scale {
            return std::big_integer::compare(&lhs.*._unscaled, &rhs.*._unscaled);
        }

        var tmp_lhs = big_decimal::init_from_big_decimal(lhs.*._unscaled._allocator, lhs);
        var tmp_rhs = big_decimal::init_from_big_decimal(rhs.*._unscaled._allocator, rhs);
        tmp_lhs.set_scale(*std::max[[usize]](&tmp_lhs._scale, &tmp_rhs._scale));
        tmp_rhs.set_scale(*std::max[[usize]](&tmp_lhs._scale, &tmp_rhs._scale));
        defer tmp_lhs.fini();
        defer tmp_rhs.fini();

        return std::big_integer::compare(&tmp_lhs._unscaled, &tmp_rhs._unscaled);
    }

    func format(self: *big_decimal, writer: std::writer, fmt: []byte) std::result[[void, std::error]] {
        if countof(fmt) != 0 {
            return std::result[[void, std::error]]::init_error(std::error::INVALID_ARGUMENT);
        }

        let DIGITS_TABLE = (:[]byte)[
            '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'
        ];

        var output = std::vector[[byte]]::init_with_allocator(self.*._unscaled._allocator);
        defer output.fini();

        var tmp = std::big_integer::init_from_big_integer_with_allocator(self.*._unscaled._allocator, &self.*._unscaled);
        defer tmp.fini();
        std::big_integer::abs(&tmp, &tmp);

        var scale = self.*._scale;

        for scale != 0 {
            var div = std::big_integer::init_with_allocator(self.*._unscaled._allocator);
            defer div.fini();
            var rem = std::big_integer::init_with_allocator(self.*._unscaled._allocator);
            defer rem.fini();
            std::big_integer::divrem(&div, &rem, &tmp, &std::big_integer::POSITIVE_TEN);

            if rem._sign == 0 {
                output.insert(0u, '0');
            }
            elif rem._sign == +1 {
                std::assert(countof(rem._limbs) == 1);
                var digit = DIGITS_TABLE[(:usize)rem._limbs[0]];
                output.insert(0u, digit);
            }
            else {
                std::panic("unreachable");
            }

            std::big_integer::assign(&tmp, &div);
            scale = scale - 1;
        }

        if self.*._scale != 0 {
            output.insert(0u, '.');
        }

        for not std::eq[[std::big_integer]](&tmp, &std::big_integer::ZERO) {
            var div = std::big_integer::init_with_allocator(self.*._unscaled._allocator);
            defer div.fini();
            var rem = std::big_integer::init_with_allocator(self.*._unscaled._allocator);
            defer rem.fini();
            std::big_integer::divrem(&div, &rem, &tmp, &std::big_integer::POSITIVE_TEN);

            if rem._sign == 0 {
                output.insert(0u, '0');
            }
            elif rem._sign == +1 {
                std::assert(countof(rem._limbs) == 1);
                var digit = DIGITS_TABLE[(:usize)rem._limbs[0]];
                output.insert(0u, digit);
            }
            else {
                std::panic("unreachable");
            }

            std::big_integer::assign(&tmp, &div);
        }

        if self.*._scale == 0 and std::eq[[std::big_integer]](&self.*._unscaled, &std::big_integer::ZERO) or output.data()[0] == '.' {
            output.insert(0u, '0');
        }

        if std::lt[[std::big_integer]](&self.*._unscaled, &std::big_integer::ZERO) {
            output.insert(0u, '-');
        }

        return std::write_all(writer, output.data());
    }

    # res = -rhs
    # res scale = rhs scale
    func neg(res: *big_decimal, rhs: *big_decimal) void {
        big_decimal::assign(res, rhs);
        std::big_integer::neg(&res.*._unscaled, &res.*._unscaled);
    }

    # res = abs(rhs)
    # res scale = rhs scale
    func abs(res: *big_decimal, rhs: *big_decimal) void {
        big_decimal::assign(res, rhs);
        std::big_integer::abs(&res.*._unscaled, &res.*._unscaled);
    }

    # res = lhs + rhs
    # res scale = max(lhs scale, rhs scale)
    # The result is calculated exactly.
    func add(res: *big_decimal, lhs: *big_decimal, rhs: *big_decimal) void {
        var tmp_lhs = big_decimal::init(res.*._unscaled._allocator);
        defer tmp_lhs.fini();
        big_decimal::assign(&tmp_lhs, lhs);

        var tmp_rhs = big_decimal::init(res.*._unscaled._allocator);
        defer tmp_rhs.fini();
        big_decimal::assign(&tmp_rhs, rhs);

        if tmp_lhs._scale < tmp_rhs._scale {
            tmp_lhs.set_scale(tmp_rhs._scale);
        }
        if tmp_lhs._scale > tmp_rhs._scale {
            tmp_rhs.set_scale(tmp_lhs._scale);
        }

        std::assert(tmp_lhs._scale == tmp_rhs._scale);
        std::big_integer::add(&res.*._unscaled, &tmp_lhs._unscaled, &tmp_rhs._unscaled);
        res.*._scale = tmp_lhs._scale;
    }

    # res = lhs - rhs
    # res scale = max(lhs scale, rhs scale)
    # The result is calculated exactly.
    func sub(res: *big_decimal, lhs: *big_decimal, rhs: *big_decimal) void {
        var tmp_lhs = big_decimal::init(res.*._unscaled._allocator);
        defer tmp_lhs.fini();
        big_decimal::assign(&tmp_lhs, lhs);

        var tmp_rhs = big_decimal::init(res.*._unscaled._allocator);
        defer tmp_rhs.fini();
        big_decimal::assign(&tmp_rhs, rhs);

        if tmp_lhs._scale < tmp_rhs._scale {
            tmp_lhs.set_scale(tmp_rhs._scale);
        }
        if tmp_lhs._scale > tmp_rhs._scale {
            tmp_rhs.set_scale(tmp_lhs._scale);
        }

        std::assert(tmp_lhs._scale == tmp_rhs._scale);
        std::big_integer::sub(&res.*._unscaled, &tmp_lhs._unscaled, &tmp_rhs._unscaled);
        res.*._scale = tmp_lhs._scale;
    }

    # res = lhs * rhs
    # res scale = lhs scale + rhs scale
    # The result is calculated exactly.
    func mul(res: *big_decimal, lhs: *big_decimal, rhs: *big_decimal) void {
        var tmp_lhs = big_decimal::init(res.*._unscaled._allocator);
        defer tmp_lhs.fini();
        big_decimal::assign(&tmp_lhs, lhs);

        var tmp_rhs = big_decimal::init(res.*._unscaled._allocator);
        defer tmp_rhs.fini();
        big_decimal::assign(&tmp_rhs, rhs);

        var scale = tmp_lhs._scale + tmp_rhs._scale;
        tmp_lhs.set_scale(scale);
        tmp_rhs.set_scale(scale);

        std::assert(tmp_lhs._scale == tmp_rhs._scale);
        std::big_integer::mul(&res.*._unscaled, &tmp_lhs._unscaled, &tmp_rhs._unscaled);
        res.*._scale = scale * 2;
        res.*.set_scale(scale);
    }

    # res = lhs / rhs
    # res scale = max(lhs scale, rhs scale) + 3
    # The result is calculated approximately and rounded half up.
    func div(res: *big_decimal, lhs: *big_decimal, rhs: *big_decimal) void {
        var tmp_lhs = big_decimal::init(res.*._unscaled._allocator);
        defer tmp_lhs.fini();
        big_decimal::assign(&tmp_lhs, lhs);

        var tmp_rhs = big_decimal::init(res.*._unscaled._allocator);
        defer tmp_rhs.fini();
        big_decimal::assign(&tmp_rhs, rhs);

        if tmp_lhs._scale < tmp_rhs._scale {
            tmp_lhs.set_scale(tmp_rhs._scale);
        }
        if tmp_lhs._scale > tmp_rhs._scale {
            tmp_rhs.set_scale(tmp_lhs._scale);
        }

        var decimals = tmp_lhs._scale + 3u;
        tmp_lhs.set_scale(tmp_lhs._scale + decimals);
        tmp_rhs.set_scale(tmp_rhs._scale + decimals);

        for _ in decimals {
            std::big_integer::mul(&tmp_lhs._unscaled, &tmp_lhs._unscaled, &std::big_integer::POSITIVE_TEN);
        }

        var rem = std::big_integer::init_with_allocator(res.*._unscaled._allocator);
        defer rem.fini();

        let POSITIVE_FIVE_HUNDRED = (:std::big_integer){
            ._allocator = std::null_allocator::ALLOCATOR,
            ._sign = +1,
            ._limbs = (:[]u32)[500]
        };

        std::big_integer::divrem(&res.*._unscaled, &rem, &tmp_lhs._unscaled, &tmp_rhs._unscaled);
        std::big_integer::abs(&rem, &rem);
        if std::ge[[std::big_integer]](&rem, &POSITIVE_FIVE_HUNDRED) {
            # Round half up.
            std::big_integer::add(&res.*._unscaled, &res.*._unscaled, &std::big_integer::POSITIVE_ONE);
        }

        res.*._scale = decimals;
    }
}
