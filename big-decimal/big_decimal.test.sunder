import "std";

import "big_decimal.sunder";

func test_init() void {
    var x = big_decimal::init();
    defer x.fini();
    std::print_format_line(
        std::out(),
        "{}",
        (:[]std::formatter)[std::formatter::init[[big_decimal]](&x)]);
}

func test_init_from_int[[T]](int: T) void {
    var x = big_decimal::init_from_int[[T]](int);
    defer x.fini();
    std::print_format_line(
        std::out(),
        "{}",
        (:[]std::formatter)[std::formatter::init[[big_decimal]](&x)]);
}

func test_init_from_str(str: []byte) void {
    var result = big_decimal::init_from_str(str);
    if result.is_error() {
        std::print_format_line(
            std::out(),
            "{}",
            (:[]std::formatter)[std::formatter::init[[[]byte]](&result.error().*.data)]);
        return;
    }
    var x = result.value();
    defer x.fini();
    std::print_format_line(
        std::out(),
        "{}",
        (:[]std::formatter)[std::formatter::init[[big_decimal]](&x)]);
}

func test_scale(str: []byte) void {
    var result = big_decimal::init_from_str(str);
    var x = result.value();
    defer x.fini();
    var scale = x.scale();
    std::print_format_line(
        std::out(),
        "scale = {}",
        (:[]std::formatter)[std::formatter::init[[usize]](&scale)]);
}

func test_set_scale(initial: []byte, new_scale: usize) void {
    var result = big_decimal::init_from_str(initial);
    var x = result.value();
    defer x.fini();
    x.set_scale(new_scale);
    var scale = x.scale();
    std::print_format_line(
        std::out(),
        "{}, scale = {}",
        (:[]std::formatter)[
            std::formatter::init[[big_decimal]](&x),
            std::formatter::init[[usize]](&scale)]);
}

func test_assign(lhs: []byte, rhs: []byte) void {
    var result = big_decimal::init_from_str(lhs);
    var x = result.value();
    defer x.fini();

    var result = big_decimal::init_from_str(rhs);
    var y = result.value();
    defer y.fini();

    big_decimal::assign(&x, &y);

    std::print_format_line(
        std::out(),
        "{} <- {}",
        (:[]std::formatter)[
            std::formatter::init[[big_decimal]](&x),
            std::formatter::init[[big_decimal]](&y)]);
}

func test_compare(lhs: []byte, rhs: []byte) void {
    var result = big_decimal::init_from_str(lhs);
    var x = result.value();
    defer x.fini();

    var result = big_decimal::init_from_str(rhs);
    var y = result.value();
    defer y.fini();

    var cmp = big_decimal::compare(&x, &y);

    std::print_format_line(
        std::out(),
        "compare {} and {}: {}",
        (:[]std::formatter)[
            std::formatter::init[[big_decimal]](&x),
            std::formatter::init[[big_decimal]](&y),
            std::formatter::init[[ssize]](&cmp)]);
}

func test_neg(initial: []byte) void {
    var result = big_decimal::init_from_str(initial);
    var x = result.value();
    defer x.fini();

    big_decimal::neg(&x, &x);

    std::print_format_line(
        std::out(),
        "{}",
        (:[]std::formatter)[
            std::formatter::init[[big_decimal]](&x)]);
}

func test_abs(initial: []byte) void {
    var result = big_decimal::init_from_str(initial);
    var x = result.value();
    defer x.fini();

    big_decimal::abs(&x, &x);

    std::print_format_line(
        std::out(),
        "{}",
        (:[]std::formatter)[
            std::formatter::init[[big_decimal]](&x)]);
}

func test_add(lhs: []byte, rhs: []byte) void {
    var result = big_decimal::init_from_str(lhs);
    var x = result.value();
    defer x.fini();

    var result = big_decimal::init_from_str(rhs);
    var y = result.value();
    defer y.fini();

    var z = big_decimal::init();
    defer z.fini();

    big_decimal::add(&z, &x, &y);

    std::print_format_line(
        std::out(),
        "{} = {} + {}",
        (:[]std::formatter)[
            std::formatter::init[[big_decimal]](&z),
            std::formatter::init[[big_decimal]](&x),
            std::formatter::init[[big_decimal]](&y)]);
}

func test_sub(lhs: []byte, rhs: []byte) void {
    var result = big_decimal::init_from_str(lhs);
    var x = result.value();
    defer x.fini();

    var result = big_decimal::init_from_str(rhs);
    var y = result.value();
    defer y.fini();

    var z = big_decimal::init();
    defer z.fini();

    big_decimal::sub(&z, &x, &y);

    std::print_format_line(
        std::out(),
        "{} = {} - {}",
        (:[]std::formatter)[
            std::formatter::init[[big_decimal]](&z),
            std::formatter::init[[big_decimal]](&x),
            std::formatter::init[[big_decimal]](&y)]);
}

func test_mul(lhs: []byte, rhs: []byte) void {
    var result = big_decimal::init_from_str(lhs);
    var x = result.value();
    defer x.fini();

    var result = big_decimal::init_from_str(rhs);
    var y = result.value();
    defer y.fini();

    var z = big_decimal::init();
    defer z.fini();

    big_decimal::mul(&z, &x, &y);

    std::print_format_line(
        std::out(),
        "{} = {} * {}",
        (:[]std::formatter)[
            std::formatter::init[[big_decimal]](&z),
            std::formatter::init[[big_decimal]](&x),
            std::formatter::init[[big_decimal]](&y)]);
}

func test_div(lhs: []byte, rhs: []byte) void {
    var result = big_decimal::init_from_str(lhs);
    var x = result.value();
    defer x.fini();

    var result = big_decimal::init_from_str(rhs);
    var y = result.value();
    defer y.fini();

    var z = big_decimal::init();
    defer z.fini();

    big_decimal::div(&z, &x, &y);

    std::print_format_line(
        std::out(),
        "{} = {} / {}",
        (:[]std::formatter)[
            std::formatter::init[[big_decimal]](&z),
            std::formatter::init[[big_decimal]](&x),
            std::formatter::init[[big_decimal]](&y)]);
}

func main() void {
    test_init();

    std::print(std::out(), "\n");

    test_init_from_int[[u8]](u8::MIN);
    test_init_from_int[[u8]](u8::MAX);
    test_init_from_int[[u16]](u16::MIN);
    test_init_from_int[[u16]](u16::MAX);
    test_init_from_int[[u32]](u32::MIN);
    test_init_from_int[[u32]](u32::MAX);
    test_init_from_int[[u64]](u64::MIN);
    test_init_from_int[[u64]](u64::MAX);

    std::print(std::out(), "\n");

    test_init_from_int[[s8]](s8::MIN);
    test_init_from_int[[s8]](s8::MAX);
    test_init_from_int[[s16]](s16::MIN);
    test_init_from_int[[s16]](s16::MAX);
    test_init_from_int[[s32]](s32::MIN);
    test_init_from_int[[s32]](s32::MAX);
    test_init_from_int[[s64]](s64::MIN);
    test_init_from_int[[s64]](s64::MAX);

    std::print(std::out(), "\n");

    test_init_from_str("0");
    test_init_from_str("+0");
    test_init_from_str("-0");
    test_init_from_str("123");
    test_init_from_str("+123");
    test_init_from_str("-123");
    test_init_from_str("0.0");
    test_init_from_str("0.00");
    test_init_from_str("0.000");
    test_init_from_str("+0.000");
    test_init_from_str("-0.000");
    test_init_from_str("123.456");
    test_init_from_str("+123.456");
    test_init_from_str("-123.456");

    std::print(std::out(), "\n");

    test_init_from_str("0b0");
    test_init_from_str("0o0");
    test_init_from_str("0x0");
    test_init_from_str("123.456.789");
    test_init_from_str("123.");
    test_init_from_str(".456");
    test_init_from_str(".");
    test_init_from_str("123.0x0");

    std::print(std::out(), "\n");

    test_scale("123");
    test_scale("123.0");
    test_scale("123.00");
    test_scale("123.000");

    std::print(std::out(), "\n");

    test_set_scale("123", 0);
    test_set_scale("123", 1);
    test_set_scale("123", 2);
    test_set_scale("123.00", 0);
    test_set_scale("123.00", 1);
    test_set_scale("123.00", 2);
    test_set_scale("123.456", 0);
    test_set_scale("123.456", 1);
    test_set_scale("123.456", 2);
    test_set_scale("123.456", 3);
    test_set_scale("123.456", 4);
    test_set_scale("123.654", 0);
    test_set_scale("123.654", 1);
    test_set_scale("123.654", 2);
    test_set_scale("123.654", 3);
    test_set_scale("123.654", 4);

    std::print(std::out(), "\n");

    test_assign("0", "123.456");
    test_assign("123", "123.456");
    test_assign("123.456", "123");
    test_assign("0", "-1.00");

    std::print(std::out(), "\n");

    test_compare("0", "0");
    test_compare("123", "123");
    test_compare("+123", "-123");
    test_compare("-123", "+123");
    test_compare("0.000", "0.000");
    test_compare("0", "0.000");
    test_compare("123.456", "123.456");
    test_compare("+123.456", "-123.456");
    test_compare("-123.456", "+123.456");
    test_compare("123.456", "123");
    test_compare("123", "123.456");
    test_compare("-123.456", "-123");
    test_compare("-123", "-123.456");

    std::print(std::out(), "\n");

    test_neg("0");
    test_neg("0.0");
    test_neg("0.00");
    test_neg("+123");
    test_neg("-123");
    test_neg("+123.456");
    test_neg("-123.456");

    std::print(std::out(), "\n");

    test_abs("0");
    test_abs("0.0");
    test_abs("0.00");
    test_abs("+123");
    test_abs("-123");
    test_abs("+123.456");
    test_abs("-123.456");

    std::print(std::out(), "\n");

    test_add("0", "0");
    test_add("0.000", "0.000");
    test_add("0", "0.000");
    test_add("0.000", "0");
    test_add("123", "456");
    test_add("123.000", "456.000");
    test_add("123.123", "456.456");
    test_add("123", "456.456");
    test_add("123.123", "456");
    test_add("+123.1", "+456.45");
    test_add("+123.1", "-456.45");
    test_add("-123.1", "+456.45");
    test_add("-123.1", "-456.45");

    std::print(std::out(), "\n");

    test_sub("0", "0");
    test_sub("0.000", "0.000");
    test_sub("0", "0.000");
    test_sub("0.000", "0");
    test_sub("123", "456");
    test_sub("123.000", "456.000");
    test_sub("123.123", "456.456");
    test_sub("123", "456.456");
    test_sub("123.123", "456");
    test_sub("+123.1", "+456.45");
    test_sub("+123.1", "-456.45");
    test_sub("-123.1", "+456.45");
    test_sub("-123.1", "-456.45");

    std::print(std::out(), "\n");

    test_mul("0", "0");
    test_mul("0.000", "0.000");
    test_mul("0", "0.000");
    test_mul("0.000", "0");
    test_mul("123", "456");
    test_mul("123.000", "456.000");
    test_mul("123.123", "456.456");
    test_mul("123", "456.456");
    test_mul("123.123", "456");
    test_mul("+123.1", "+456.45");
    test_mul("+123.1", "-456.45");
    test_mul("-123.1", "+456.45");
    test_mul("-123.1", "-456.45");

    std::print(std::out(), "\n");

    test_div("123", "456");
    test_div("123.000", "456.000");
    test_div("123.123", "456.456");
    test_div("123", "456.456");
    test_div("123.123", "456");
    test_div("+123.1", "+456.45");
    test_div("+123.1", "-456.45");
    test_div("-123.1", "+456.45");
    test_div("-123.1", "-456.45");

    test_div("456", "123");
    test_div("456.000", "123.000");
    test_div("456.456", "123.123");
    test_div("456.456", "123");
    test_div("456", "123.123");
    test_div("456.45", "123.1");

    std::print(std::out(), "\n");

    # Verify none of these operations leak memory.
    var iter = std::general_allocator_iterator::init(&std::global_general_allocator);
    var leaks = 0u;
    for iter.advance() {
        leaks = leaks + 1;
    }
    std::assert(leaks == 0);

    # Finally end the test with a divide by zero error.
    test_div("1.0", "0.0");
}
################################################################################
# 0
#
# 0
# 255
# 0
# 65535
# 0
# 4294967295
# 0
# 18446744073709551615
#
# -128
# 127
# -32768
# 32767
# -2147483648
# 2147483647
# -9223372036854775808
# 9223372036854775807
#
# 0
# 0
# 0
# 123
# 123
# -123
# 0.0
# 0.00
# 0.000
# 0.000
# 0.000
# 123.456
# 123.456
# -123.456
#
# parse failure
# parse failure
# parse failure
# parse failure
# parse failure
# parse failure
# parse failure
# parse failure
#
# scale = 0
# scale = 1
# scale = 2
# scale = 3
#
# 123, scale = 0
# 123.0, scale = 1
# 123.00, scale = 2
# 123, scale = 0
# 123.0, scale = 1
# 123.00, scale = 2
# 123, scale = 0
# 123.5, scale = 1
# 123.46, scale = 2
# 123.456, scale = 3
# 123.4560, scale = 4
# 124, scale = 0
# 123.7, scale = 1
# 123.65, scale = 2
# 123.654, scale = 3
# 123.6540, scale = 4
#
# 123.456 <- 123.456
# 123.456 <- 123.456
# 123 <- 123
# -1.00 <- -1.00
#
# compare 0 and 0: 0
# compare 123 and 123: 0
# compare 123 and -123: 1
# compare -123 and 123: -1
# compare 0.000 and 0.000: 0
# compare 0 and 0.000: 0
# compare 123.456 and 123.456: 0
# compare 123.456 and -123.456: 1
# compare -123.456 and 123.456: -1
# compare 123.456 and 123: 1
# compare 123 and 123.456: -1
# compare -123.456 and -123: -1
# compare -123 and -123.456: 1
#
# 0
# 0.0
# 0.00
# -123
# 123
# -123.456
# 123.456
#
# 0
# 0.0
# 0.00
# 123
# 123
# 123.456
# 123.456
#
# 0 = 0 + 0
# 0.000 = 0.000 + 0.000
# 0.000 = 0 + 0.000
# 0.000 = 0.000 + 0
# 579 = 123 + 456
# 579.000 = 123.000 + 456.000
# 579.579 = 123.123 + 456.456
# 579.456 = 123 + 456.456
# 579.123 = 123.123 + 456
# 579.55 = 123.1 + 456.45
# -333.35 = 123.1 + -456.45
# 333.35 = -123.1 + 456.45
# -579.55 = -123.1 + -456.45
#
# 0 = 0 - 0
# 0.000 = 0.000 - 0.000
# 0.000 = 0 - 0.000
# 0.000 = 0.000 - 0
# -333 = 123 - 456
# -333.000 = 123.000 - 456.000
# -333.333 = 123.123 - 456.456
# -333.456 = 123 - 456.456
# -332.877 = 123.123 - 456
# -333.35 = 123.1 - 456.45
# 579.55 = 123.1 - -456.45
# -579.55 = -123.1 - 456.45
# 333.35 = -123.1 - -456.45
#
# 0 = 0 * 0
# 0.000000 = 0.000 * 0.000
# 0.000 = 0 * 0.000
# 0.000 = 0.000 * 0
# 56088 = 123 * 456
# 56088.000000 = 123.000 * 456.000
# 56200.232088 = 123.123 * 456.456
# 56144.088 = 123 * 456.456
# 56144.088 = 123.123 * 456
# 56188.995 = 123.1 * 456.45
# -56188.995 = 123.1 * -456.45
# -56188.995 = -123.1 * 456.45
# 56188.995 = -123.1 * -456.45
#
# 0.270 = 123 / 456
# 0.269737 = 123.000 / 456.000
# 0.269737 = 123.123 / 456.456
# 0.269468 = 123 / 456.456
# 0.270007 = 123.123 / 456
# 0.26969 = 123.1 / 456.45
# -0.26967 = 123.1 / -456.45
# -0.26967 = -123.1 / 456.45
# 0.26969 = -123.1 / -456.45
# 3.708 = 456 / 123
# 3.707318 = 456.000 / 123.000
# 3.707318 = 456.456 / 123.123
# 3.711025 = 456.456 / 123
# 3.703614 = 456 / 123.123
# 3.70797 = 456.45 / 123.1
#
# panic: divide by zero
