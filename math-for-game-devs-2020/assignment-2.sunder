import "c";
import "oat";

import "draw.sunder";
import "math.sunder";

let SCREEN_W: sint = 640;
let SCREEN_H: sint = 480;
let TIMESTEP: f64 = 1.0 / 60.0;

let RED = (:rgba){.r = 0xFF, .g = 0x00, .b = 0x00, .a = 0xFF};
let GREEN = (:rgba){.r = 0x00, .g = 0xFF, .b = 0x00, .a = 0xFF};
let BLUE = (:rgba){.r = 0x00, .g = 0x00, .b = 0xFF, .a = 0xFF};
let WHITE = (:rgba){.r = 0xFF, .g = 0xFF, .b = 0xFF, .a = 0xFF};

func main() void {
    oat_init(SCREEN_W, SCREEN_H, startof("Assignment 2"));
    defer oat_fini();

    var player = vec2::init(100.0f32 + HALF_PIXEL, (:f32)SCREEN_H / 2.0 + HALF_PIXEL);
    var target = vec2::init((:f32)(SCREEN_W - 100) + HALF_PIXEL, (:f32)SCREEN_H / 2.0 + HALF_PIXEL);
    var threshold = 0.5f32;

    var time: double = 0.0;
    var prev: double = 0.0;
    for not oat_get_quit_requested() {
        var now: double = oat_now();
        time = time + (now - prev);
        prev = now;
        if time <= TIMESTEP {
            continue;
        }
        time = time - TIMESTEP;

        if (oat_key_is_pressed(oat_key_escape())) {
            oat_set_quit_requested(true);
        }

        var player_velocity = vec2::init(0.0, 0.0);
        if (oat_key_is_down(oat_key_a())) {
            player_velocity.x = player_velocity.x - 1.0;
        }
        if (oat_key_is_down(oat_key_d())) {
            player_velocity.x = player_velocity.x + 1.0;
        }
        if (oat_key_is_down(oat_key_w())) {
            player_velocity.y = player_velocity.y - 1.0;
        }
        if (oat_key_is_down(oat_key_s())) {
            player_velocity.y = player_velocity.y + 1.0;
        }
        player = vec2::add(player, vec2::normalize_or_zero(player_velocity));

        var target_velocity = vec2::init(0.0, 0.0);
        if (oat_key_is_down(oat_key_larrow())) {
            target_velocity.x = target_velocity.x - 1.0;
        }
        if (oat_key_is_down(oat_key_rarrow())) {
            target_velocity.x = target_velocity.x + 1.0;
        }
        if (oat_key_is_down(oat_key_uarrow())) {
            target_velocity.y = target_velocity.y - 1.0;
        }
        if (oat_key_is_down(oat_key_darrow())) {
            target_velocity.y = target_velocity.y + 1.0;
        }
        target = vec2::add(target, vec2::normalize_or_zero(target_velocity));

        if (oat_key_is_down(oat_key_q())) {
            threshold = threshold - 0.05;
        }
        if (oat_key_is_down(oat_key_e())) {
            threshold = threshold + 0.05;
        }
        threshold = clamp(threshold, -1.0, +1.0);

        var cursor = vec2::init((:f32)oat_mouse_get_x() + HALF_PIXEL, (:f32)oat_mouse_get_y() + HALF_PIXEL);
        var player_to_target = vec2::sub(target, player);
        var player_to_cursor = vec2::sub(cursor, player);
        var color = RED;
        if vec2::dot(vec2::normalize_or_zero(player_to_target), vec2::normalize_or_zero(player_to_cursor)) >= threshold {
            color = GREEN;
        }

        oat_draw_clear(0x40, 0x40, 0x40);
        draw_line(vec2::sub(player, vec2::init(-HALF_PIXEL, -HALF_PIXEL)), cursor, WHITE);
        draw_line(vec2::sub(player, vec2::init(-HALF_PIXEL, +HALF_PIXEL)), cursor, WHITE);
        draw_line(vec2::sub(player, vec2::init(+HALF_PIXEL, -HALF_PIXEL)), cursor, WHITE);
        draw_line(vec2::sub(player, vec2::init(+HALF_PIXEL, +HALF_PIXEL)), cursor, WHITE);
        draw_circle(cursor, 1.0, BLUE);
        draw_circle(player, 5.0, BLUE);
        draw_circle(target, 5.0, color);
        oat_end_frame();
    }
}
