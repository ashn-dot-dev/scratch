import "std";

struct game {
    var id: usize;
    var sets: []set;
}

struct set {
    var r: std::optional[[usize]];
    var g: std::optional[[usize]];
    var b: std::optional[[usize]];
}

func main() void {
    var input = std::ascii::view_trimmed(embed("day-02.input"));
    var lines = std::str::split(input, "\n");
    defer std::slice[[[]byte]]::delete(lines);

    var part1_answer = 0u;
    var part2_answer = 0u;
    var iter = std::slice_iterator[[[]byte]]::init(lines);
    for iter.advance() {
        var line = *iter.current();

        var cut = std::str::cut(line, ":");
        var game = cut.value().prefix;
        var sets = std::ascii::view_trimmed(cut.value().suffix);

        var cut = std::str::cut(game, " ");
        var id = usize::init_from_str(cut.value().suffix, 10);
        var id = id.value();

        var split = std::str::split(sets, "; ");
        var game = (: ::game){
            .id = id,
            .sets = std::slice[[set]]::new(countof(split)),
        };
        for i in countof(split) {
            var split = std::str::split(split[i], ", ");
            var set = (:set){
                .r = std::optional[[usize]]::EMPTY,
                .b = std::optional[[usize]]::EMPTY,
                .g = std::optional[[usize]]::EMPTY,
            };
            for ii in countof(split) {
                var cut = std::str::cut(split[ii], " ");
                var num = usize::init_from_str(cut.value().prefix, 10);
                var num = num.value();
                var color = cut.value().suffix;
                if std::str::eq(color, "red") {
                    set.r = std::optional[[usize]]::init_value(num);
                }
                if std::str::eq(color, "blue") {
                    set.b = std::optional[[usize]]::init_value(num);
                }
                if std::str::eq(color, "green") {
                    set.g = std::optional[[usize]]::init_value(num);
                }
                game.sets[i] = set;
            }
        }

        let R = 12u;
        let G = 13u;
        let B = 14u;
        var max_r = 0u;
        var max_g = 0u;
        var max_b = 0u;
        var possible = true;
        for i in countof(game.sets) {
            if game.sets[i].r.is_value() and game.sets[i].r.value() > R {
                possible = false;
            }
            if game.sets[i].g.is_value() and game.sets[i].g.value() > G {
                possible = false;
            }
            if game.sets[i].b.is_value() and game.sets[i].b.value() > B {
                possible = false;
            }

            if game.sets[i].r.is_value() {
                max_r = usize::max(max_r, game.sets[i].r.value());
            }
            if game.sets[i].g.is_value() {
                max_g = usize::max(max_g, game.sets[i].g.value());
            }
            if game.sets[i].b.is_value() {
                max_b = usize::max(max_b, game.sets[i].b.value());
            }
        }

        var power = max_r * max_g * max_b;
        if possible {
            part1_answer = part1_answer + game.id;
        }
        part2_answer = part2_answer + power;
    }

    std::print_format_line(
        std::out(),
        "PART 1: {}",
        (:[]std::formatter)[std::formatter::init[[typeof(part1_answer)]](&part1_answer)]);
    std::print_format_line(
        std::out(),
        "PART 2: {}",
        (:[]std::formatter)[std::formatter::init[[typeof(part2_answer)]](&part2_answer)]);
}
################################################################################
# PART 1: 2256
# PART 2: 74229
