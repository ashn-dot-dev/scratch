import "std";

func main() void {
    var input = std::ascii::view_trimmed(embed("day-02.input"));
    var lines = std::str::split(input, "\n");
    defer std::slice[[[]byte]]::delete(lines);

    var part1_answer = 0u;
    var part2_answer = 0u;
    var iter = std::slice_iterator[[[]byte]]::init(lines);
    for iter.advance() {
        var line = *iter.current();

        var cut = std::str::cut(line, ":");
        var game = cut.value().prefix;
        var sets = std::ascii::view_trimmed(cut.value().suffix);

        var cut = std::str::cut(game, " ");
        var id = usize::init_from_str(cut.value().suffix, 10);
        var id = id.value();

        let R = 12u;
        let G = 13u;
        let B = 14u;
        var max_r = 0u;
        var max_g = 0u;
        var max_b = 0u;
        var possible = true;
        var split = std::str::split(sets, "; ");
        defer std::slice[[[]byte]]::delete(split);
        for i in countof(split) {
            var r = 0u;
            var g = 0u;
            var b = 0u;

            var split = std::str::split(split[i], ", ");
            defer std::slice[[[]byte]]::delete(split);
            for ii in countof(split) {
                var cut = std::str::cut(split[ii], " ");
                var num = usize::init_from_str(cut.value().prefix, 10);
                var num = num.value();
                var color = cut.value().suffix;
                if std::str::eq(color, "red") {
                    assert r == 0;
                    r = num;
                }
                if std::str::eq(color, "green") {
                    assert g == 0;
                    g = num;
                }
                if std::str::eq(color, "blue") {
                    assert b == 0;
                    b = num;
                }

                if r > R or g > G or b > B {
                    possible = false;
                }
                max_r = usize::max(max_r, r);
                max_g = usize::max(max_g, g);
                max_b = usize::max(max_b, b);
            }
        }

        if possible {
            part1_answer = part1_answer + id;
        }
        var power = max_r * max_g * max_b;
        part2_answer = part2_answer + power;
    }

    std::print_format_line(
        std::out(),
        "PART 1: {}",
        (:[]std::formatter)[std::formatter::init[[typeof(part1_answer)]](&part1_answer)]);
    std::print_format_line(
        std::out(),
        "PART 2: {}",
        (:[]std::formatter)[std::formatter::init[[typeof(part2_answer)]](&part2_answer)]);
}
################################################################################
# PART 1: 2256
# PART 2: 74229
