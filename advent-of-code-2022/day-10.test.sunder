import "std";

const CYCLES_PER_SCAN_LINE = 40u;

struct instruction {
    var cycles: usize; # Number of cycles remaining.
    var number: ssize; # NUmber to be added to the X register once completed.
}

func main() void {
    var result = std::file::open("day-10.input", std::file::OPEN_READ);
    var file = result.value();
    defer file.close();

    var reader = std::reader::init[[typeof(file)]](&file);

    var instructions = std::vector[[instruction]]::init();
    defer instructions.fini();
    for true {
        var result = std::read_line(reader);
        var optional = result.value();
        if optional.is_empty() {
            break;
        }
        var line = optional.value();
        defer std::slice[[byte]]::delete(line);

        if std::str::starts_with(line, "noop") {
            instructions.push((:instruction){.cycles = 1, .number = 0});
        }
        elif std::str::starts_with(line, "addx") {
            var result = ssize::init_from_str(line[countof("addx "):countof(line)], 10);
            var number = result.value();
            instructions.push((:instruction){.cycles = 2, .number = number});
        }
    }

    var x = 1s; # X register
    var s = std::string::init(); # Scan line
    defer s.fini();

    var part1_answer = 0s;
    for cycle in 1:240+1 {
        if instructions.count() == 0 {
            continue;
        }

        if cycle == 20
        or cycle == 60
        or cycle == 100
        or cycle == 140
        or cycle == 180
        or cycle == 220 {
            var strength = (:ssize)cycle * x;
            part1_answer = part1_answer + strength;
        }

        var beam = (:ssize)(cycle % CYCLES_PER_SCAN_LINE) - 1;
        if beam == x - 1 or beam == x or beam == x + 1 {
            std::print(std::writer::init[[std::string]](&s), "#");
        }
        else {
            std::print(std::writer::init[[std::string]](&s), ".");
        }

        #debug(cycle, x, instructions.data()[0], &s);

        if cycle % CYCLES_PER_SCAN_LINE == 0 {
            std::print_line(std::out(), s.data());
            s.resize(0);
        }

        instructions.data()[0].cycles = instructions.data()[0].cycles - 1;
        if instructions.data()[0].cycles == 0 {
            x = x + instructions.data()[0].number;
            instructions.remove(0);
        }
    }

    std::print_format_line(
        std::out(),
        "PART 1: {}",
        (:[]std::formatter)[std::formatter::init[[typeof(part1_answer)]](&part1_answer)]);
}

func debug(cycle: usize, x: ssize, inst: instruction, scan: *std::string) void {
    std::print_format_line(
        std::out(),
        "DURING CYCLE {}: X = {}, instruction cycles remaining = {}",
        (:[]std::formatter)[
            std::formatter::init[[usize]](&cycle),
            std::formatter::init[[ssize]](&x),
            std::formatter::init[[usize]](&inst.cycles)]);

    std::print_format_line(
        std::out(),
        "CURRENT CRT ROW: {}",
        (:[]std::formatter)[
            std::formatter::init[[std::string]](scan)]);

    std::print(std::out(), "Sprite position: ");
    for sprite in CYCLES_PER_SCAN_LINE {
        if (:ssize)sprite == x - 1 or (:ssize)sprite == x or (:ssize)sprite == x + 1 {
            std::print(std::out(), "#");
        }
        else {
            std::print(std::out(), ".");
        }
    }
    std::print(std::out(), "\n\n");
}
################################################################################
# ###..#....###...##..####.###...##..#...#
# #..#.#....#..#.#..#.#....#..#.#..#.#....
# #..#.#....#..#.#..#.###..###..#....#....
# ###..#....###..####.#....#..#.#....#....
# #....#....#....#..#.#....#..#.#..#.#....
# #....####.#....#..#.#....###...##..####.
# PART 1: 12560
