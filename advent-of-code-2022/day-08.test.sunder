import "std";

func char_to_ssize(char: byte) ssize {
    var str = (:[]byte){&char, 1};
    var result = ssize::init_from_str(str, 10);
    return result.value();
}

func part1(lines: [][]byte) void {
    assert countof(lines) == countof(lines[0]);
    var side_length = countof(lines); # Square grid.

    var visible = std::slice[[[]bool]]::new(side_length);
    defer std::slice[[[]bool]]::delete(visible);
    for i in side_length {
        visible[i] = std::slice[[bool]]::new(side_length);
        std::slice[[bool]]::fill(visible[i], false);
    }

    defer {
        for i in side_length {
            std::slice[[bool]]::delete(visible[i]);
        }
    }

    # Left to right.
    for row in side_length {
        var max = -1s;
        for col in side_length {
            var tree = char_to_ssize(lines[row][col]);
            if tree > max {
                visible[row][col] = true;
            }
            max = *std::max[[ssize]](&max, &tree);
        }
    }

    # Right to left.
    for row in side_length {
        var max = -1s;
        for j in side_length {
            var col = side_length - j - 1;
            var tree = char_to_ssize(lines[row][col]);
            if tree > max {
                visible[row][col] = true;
            }
            max = *std::max[[ssize]](&max, &tree);
        }
    }

    # Top to bottom.
    for col in side_length {
        var max = -1s;
        for row in side_length {
            var tree = char_to_ssize(lines[row][col]);
            if tree > max {
                visible[row][col] = true;
            }
            max = *std::max[[ssize]](&max, &tree);
        }
    }

    # Bottom to top.
    for i in side_length {
        var col = side_length - i - 1;
        var max = -1s;
        for j in side_length {
            var row = side_length - j - 1;
            var tree = char_to_ssize(lines[row][col]);
            if tree > max {
                visible[row][col] = true;
            }
            max = *std::max[[ssize]](&max, &tree);
        }
    }

    var part1_answer = 0u;
    for row in side_length {
        for col in side_length {
            part1_answer = part1_answer + (:usize)visible[row][col];
        }
    }
    std::print_format_line(
        std::out(),
        "PART 1: {}",
        (:[]std::formatter)[std::formatter::init[[typeof(part1_answer)]](&part1_answer)]);
}

func part2(lines: [][]byte) void {
    assert countof(lines) == countof(lines[0]) ;
    var side_length = countof(lines); # Square grid.

    var part2_answer = 0u;
    for row in side_length {
        for col in side_length {
            var tree = char_to_ssize(lines[row][col]);

            # Left.
            var dist_l = 0u;
            for dist_l != col {
                var view = char_to_ssize(lines[row][col - dist_l - 1]);
                dist_l = dist_l + 1;
                if view >= tree {
                    break;
                }
            }

            # Right.
            var dist_r = 0u;
            for dist_r + col + 1 != side_length {
                var view = char_to_ssize(lines[row][col + dist_r + 1]);
                dist_r = dist_r + 1;
                if view >= tree {
                    break;
                }
            }

            # Up.
            var dist_u = 0u;
            for dist_u != row {
                var view = char_to_ssize(lines[row - dist_u - 1][col]);
                dist_u = dist_u + 1;
                if view >= tree {
                    break;
                }
            }

            # Down.
            var dist_d = 0u;
            for dist_d + row + 1 != side_length {
                var view = char_to_ssize(lines[row + dist_d + 1][col]);
                dist_d = dist_d + 1;
                if view >= tree {
                    break;
                }
            }

            # Total score for this tree.
            var score = dist_l * dist_r * dist_u * dist_d;
            part2_answer = *std::max[[usize]](&part2_answer, &score);
        }
    }

    std::print_format_line(
        std::out(),
        "PART 2: {}",
        (:[]std::formatter)[std::formatter::init[[typeof(part2_answer)]](&part2_answer)]);
}

func main() void {
    var result = std::file::open("day-08.input", std::file::OPEN_READ);
    var file = result.value();
    defer file.close();

    var reader = std::reader::init[[typeof(file)]](&file);
    var result = std::read_all(reader);
    var input = std::ascii::view_trimmed(result.value());

    var lines = std::str::split(input, "\n");
    defer std::slice[[[]byte]]::delete(lines);

    part1(lines);
    part2(lines);
}
################################################################################
# PART 1: 1705
# PART 2: 371200
