# The sequence of triangle numbers is generated by adding the natural numbers.
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first
# ten terms would be:
#
#   1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
#
# Let us list the factors of the first seven triangle numbers:
#
#    1: 1
#    3: 1,3
#    6: 1,2,3,6
#   10: 1,2,5,10
#   15: 1,3,5,15
#   21: 1,3,7,21
#   28: 1,2,4,7,14,28
#
# We can see that 28 is the first triangle number to have over five divisors.
#
# What is the value of the first triangle number to have over five hundred
# divisors?
import "std";

# Integer square root using binary search.
# https://en.wikipedia.org/wiki/Integer_square_root
func isqrt(n: usize) usize {
    var L: usize = 0;
    var M: usize = 0;
    var R: usize = n + 1;

    for L != R - 1
    {
        M = (L + R) / 2;
        if M * M <= n {
            L = M;
        }
        else {
            R = M;
        }
    }

    return L;
}

func divisor_count(n: usize) usize {
    var count = 0u;
    var sqrt = isqrt(n);

    for i in 0:sqrt {
        var divisor = i + 1;
        if n % divisor == 0 {
            # One for `divisor` and one for `n / divisor`.
            count = count + 2;
        }
    }

    if sqrt * sqrt == n {
        # Remove one of the `+ 2` divisors from the loop above since `n` is a
        # perfect square and only one of the `sqrt` divisors should have been
        # counted.
        count = count - 1;
    }

    return count;
}

func main() void {
    var i = 1u;
    var n = i;

    for true {
        i = i + 1;
        n = n + i;
        var count = divisor_count(n);
        if count > 500 {
            std::print_format_line(
                std::out(),
                "{} with {} divisors",
                (:[]std::formatter)[
                    std::formatter::init[[usize]](&n),
                    std::formatter::init[[usize]](&count)]);
            break;
        }
    }
}
################################################################################
# 76576500 with 576 divisors
