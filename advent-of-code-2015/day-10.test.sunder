import "std";

const INPUT = "1113222113";

func encode(data: []byte, allocator: std::allocator) std::vector[[byte]] {
    var output = std::vector[[byte]]::init(allocator);

    var start = 0u;
    for cur in countof(data) {
        if data[cur] != data[start] {
            var length = cur - start;
            output.push((:byte)('0' + (:u8)length));
            output.push(data[start]);
            start = cur;
        }
    }

    var length = countof(data) - start;
    std::assert(length >= 1 and length < 10);
    output.push((:byte)('0' + (:u8)length));
    output.push(data[start]);

    return output;
}

func main() void {
    var allocator = std::general_allocator::init();
    defer allocator.fini();
    var allocator = std::allocator::init[[typeof(allocator)]](&allocator);

    # All string data is freed by the general allocator at main exit.

    var s = std::vector[[byte]]::init(allocator);
    for i in countof(INPUT) {
        s.push(INPUT[i]);
    }

    for i in 40 {
        var tmp = encode(s.data(), allocator);
        s.fini();
        s = tmp;
    }
    var length = s.count();
    std::print_format_line(
        std::out(),
        "PART 1: {}",
        (:[]std::formatter)[std::formatter::init[[usize]](&length)]);

    for i in 40:50 {
        var tmp = encode(s.data(), allocator);
        s.fini();
        s = tmp;
    }
    var length = s.count();
    std::print_format_line(
        std::out(),
        "PART 2: {}",
        (:[]std::formatter)[std::formatter::init[[usize]](&length)]);
}
################################################################################
# PART 1: 252594
# PART 2: 3579328
